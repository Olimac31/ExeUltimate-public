[gd_scene load_steps=9 format=2]

[ext_resource path="res://Assets/Songs/test/Modchart Test.gd" type="Script" id=1]
[ext_resource path="res://icon.png" type="Texture" id=2]

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

uniform int pixelSize = 4;

void fragment()
{
	ivec2 size = textureSize(SCREEN_TEXTURE, 0);
	
	int xRes = size.x;
	int yRes = size.y;
	
	float xFactor = float(xRes) / float(pixelSize);
	float yFactor = float(yRes) / float(pixelSize);
	
	float grid_uv_x = round(SCREEN_UV.x * xFactor) / xFactor;
	float grid_uv_y = round(SCREEN_UV.y * yFactor) / yFactor;
	
	vec4 text = texture(SCREEN_TEXTURE, vec2(grid_uv_x, grid_uv_y));
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/pixelSize = 4

[sub_resource type="Shader" id=23]
code = "shader_type canvas_item;

uniform float strength: hint_range(0.0, 0.1, 0.001) = 0.08;
uniform vec2 center = vec2(0.5, 0.5);
uniform float abberation: hint_range(0.0, 1.0, 0.001) = 0.425;

uniform float radius: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform float width: hint_range(0.0, 10.0, 0.01) = 0.04;
uniform float feather: hint_range(0.0, 1.0, 0.001) = 0.135;

void fragment() {
	vec2 st = SCREEN_UV;
	float aspect_ratio = SCREEN_PIXEL_SIZE.y/SCREEN_PIXEL_SIZE.x;
	vec2 scaled_st = (st -vec2(0.0, 0.5)) / vec2(1.0, aspect_ratio) + vec2(0,0.5); 
	
	vec3 color = vec3(st.xy, 0);
	vec2 dist_center = scaled_st - center;
	float mask =  (1.0 - smoothstep(radius-feather, radius, length(dist_center))) * smoothstep(radius - width - feather, radius-width , length(dist_center));
	vec2 offset = normalize(dist_center)*strength*mask;
	vec2 biased_st = scaled_st - offset;
	
	vec2 abber_vec = offset*abberation*mask;
	
	vec2 final_st = st*(1.0-mask) + biased_st*mask;

	vec4 red = texture(SCREEN_TEXTURE, final_st + abber_vec);
	vec4 blue = texture(SCREEN_TEXTURE, final_st - abber_vec);
	vec4 ori = texture(SCREEN_TEXTURE, final_st);
	color = vec3(red.r, ori.g, blue.b);
	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/strength = 0.1
shader_param/center = Vector2( 0.5, 0.5 )
shader_param/abberation = 0.8
shader_param/radius = 0.45
shader_param/width = 0.07
shader_param/feather = 0.834

[sub_resource type="Shader" id=25]
code = "shader_type canvas_item;

uniform bool enabled = false;

void fragment() {
	COLOR = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	if(enabled) {
		float average = (COLOR.r + COLOR.g + COLOR.b) / 3.0;
		
		if(average <= 0.1) {
			COLOR = vec4(1.0 - COLOR.r, 1.0 - COLOR.g, 1.0 - COLOR.b, COLOR.a);
		} else {
			COLOR = vec4(0, 0, 0, COLOR.a);
		}
	}
}"

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 25 )
shader_param/enabled = true

[node name="Modchart Test" type="Node2D"]
script = ExtResource( 1 )

[node name="Shaders" type="CanvasLayer" parent="."]
layer = 3

[node name="Pixelate" type="Sprite" parent="Shaders"]
visible = false
material = SubResource( 12 )
scale = Vector2( 20, 11.25 )
texture = ExtResource( 2 )
centered = false

[node name="Distort" type="Sprite" parent="Shaders"]
visible = false
material = SubResource( 24 )
position = Vector2( 4, 0 )
scale = Vector2( 20, 11.25 )
texture = ExtResource( 2 )
centered = false

[node name="Blammed" type="Sprite" parent="Shaders"]
visible = false
modulate = Color( 1, 1, 1, 0.25 )
material = SubResource( 26 )
position = Vector2( 640, 360 )
scale = Vector2( 20, 11.25 )
texture = ExtResource( 2 )
